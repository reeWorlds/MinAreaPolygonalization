II Proposed Algorithms

Problem MAP.
A set S of n points is given on a plane.
It is necessary to construct a simple polygon with the smallest possible area, which would cover a given set of points, and which vertices are all points of the set S.

a) Modification of MAP_DAC
Proposed in [13] algorithm performs next steps.
1. If the number of points is less than 6, return MAP using MAP_PermuteAndReject;
2. Sort out all given points by X coordinate;
3. Split sorted points into 2 subsets S_1 and S_2;
4. Solve recursively (from step 1) for S_1 and S_2, getting polygons P_1 and P_2;
5. Find minimal area quadrilateral Q connecting P_1 and P_2;
6. Merge P_1 and P_2 based on Q and return result.

In such a way we always split the point set by the vertical line. We can consider lines with different slope, but while it can be optimal for some point subsets it would not for other.
Therefore we propose to maintain 2 solutions for each point subset, one for vertical separation and other for vertical separation. In such a way we bring more local optimality without much loss of execution time efficiency.
Our algorithm MAP_DAC2 performs the next steps.
1. If the number of points is less than 6, return MAP using MAP_PermuteAndReject;
2. Sort out all given points by X coordinate and split sorted points into 2 subsets Sx_1 and Sx_2;
3. Solve recursively (from step 1) for Sx_1 and Sx_2 getting polygons Px_11, Px_12, Px_21 and Px_22;
4. Consider polygons PMx_1, PMx_2, PMx_3, PMx_4 recieved by merging pairs {Px_11, Px_21}, {Px_11, Px_22}, {Px_12, Px_21}, {Px_12, Px_22} respectively;
5. Let Px be one of the PMx_1, PMx_2, PMx_3, PMx_4 with the minimal area;
6. Sort out all given points by Y coordinate and split sorted points into 2 subsets Sy_1 and Sy_2;
7. Solve recursively (from step 1) for Sy_1 and Sy_2 getting polygons Py_11, Py_12, Py_21, and Py_22;
8. Consider polygons PMy_1, PMy_2, PMy_3, PMy_4 recieved by merging pairs {Py_11, Py_21}, {Py_11, Py_22}, {Py_12, Py_21}, {Py_12, Py_22} respectively;
9. Let Py be one of the PMy_1, PMy_2, PMy_3, PMy_4 with the minimal area;
10. return pair {Px, Py}.

All steps of MAP_DAC2 except 4 and 8 are straightforward. Step 4 is described in the original paper for MAP_DAC [13]. Step 8 is almost the same as 4, but with horizontal separation. In case implementation is hardcoded for vertical separation, it is possible to interchange X and Y coordinates of points to bring step 8 to 4.

b) Postprocessing of MAP solution
It is typical for MAP approximation algorithms to use heuristics that greedily choose point, edge, quadrilateral, etc. Such heuristics may be optimal on the current step but can be nonoptimal in the future.
We propose a simple postprocessing technique that removes 1 point at a time and tries to add it in the more optimal position.
Postprocessing lies in the next steps.
1. Consider all points P_i of polygon P = P_1, P_2, ..., P_n one by one;
2. If we can remove P_i such that P'= P_1, ..., P_i-1, P_i+1, ..., P_n is simple polygon(*) and segment (P_i-1, P_i+1) of P' is visible from P_i(**) then remove P_i else goto step 1 and consider next point;
3. If P_i is inside P' then find edge (P_j-1, P_j) of P` visible from P_i that maximize area of triangle {P_j-1, P_i, P_j}. if P_i is outside P' then find edge (P_j-1, P_j) of P` visible from P_i that minimize area of triangle {P_j-1, P_i, P_j};
4. Insert P_i such that new polygon P = P_1, ..., P_j-1, P_i, P_j, ..., P_n and goto step 1 considering next point.

To check (*) we can simply check whether edge (P_i-1, P_i+1) intersect other edges of P'. To check (**) we can use the visibility polygon algorithm proposed in [14]. To check whether a point is inside or outside of the polygon we can use the windmill algorithm. To find edge (P_j-1, P_j) we can use visibility polygon computed when checking (**).

In practice, we ran several trials of postprocessing until no more area minimizing points rearrangements are possible.